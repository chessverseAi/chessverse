from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from pydantic import BaseModel
from database import get_db, User
import hashlib

router = APIRouter()

# Almacenar sesiones activas
active_sessions = {}  # token → username

# Modelos
class UserCreate(BaseModel):
    username: str
    password: str

class UserLogin(BaseModel):
    username: str
    password: str

# Hash de contraseñas
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

@router.post("/register")
def register(user: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == user.username).first():
        raise HTTPException(status_code=400, detail="Usuario ya existe")
    hashed = hash_password(user.password)
    db_user = User(username=user.username, password_hash=hashed, elo=1200)
    db.add(db_user)
    db.commit()
    return {"message": "Usuario creado"}

@router.post("/login")
def login(response: Response, user: UserLogin, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.username == user.username).first()
    if not db_user or db_user.password_hash != hash_password(user.password):
        raise HTTPException(status_code=401, detail="Credenciales inválidas")
    token = hashlib.sha256(f"{user.username}{hash(time.time())}".encode()).hexdigest()
    active_sessions[token] = user.username
    response.set_cookie(key="session_token", value=token, httponly=True, max_age=3600)
    return {"message": "Login exitoso", "username": user.username}
